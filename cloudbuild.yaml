steps:
  # 1Ô∏è‚É£ PROFUNDIZAR EL CLONE: Necesario para que Nx pueda comparar HEAD con HEAD~1
  - name: 'gcr.io/cloud-builders/git'
    id: 'Deepen Git History'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deepening Git history to allow comparison with HEAD~1..."
        git fetch origin $(git rev-parse HEAD) --depth=2

  # 2Ô∏è‚É£ Instalar Node y dependencias (Solo npm ci)
  - name: 'node:22.17-bullseye'
    id: 'Install dependencies'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci
    waitFor: ['Deepen Git History']

  # 3Ô∏è‚É£ Detectar apps afectadas (Instalamos jq aqu√≠ y usamos grep para filtrar E2E)
  - name: 'node:22.17-bullseye'
    id: 'Affected apps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Detecting affected projects using modern Nx command..."
        apt-get update && apt-get install -y jq
        npx nx show projects --affected --json --target=build --base=HEAD~1 --head=HEAD --type=app | \
          jq -r '.[]' | grep -v -- "-e2e$" > ./affected_apps.txt

        if [ ! -s ./affected_apps.txt ]; then
          echo "No apps affected. Exiting this step."
          echo "" > ./affected_apps.txt
          exit 0
        fi

        echo "Detected apps:"
        cat ./affected_apps.txt
    waitFor: ['Install dependencies']

  # 4Ô∏è‚É£ Construir y Pushear solo las im√°genes de Docker de las apps afectadas
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build and push images'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ ! -s ./affected_apps.txt ]; then
          echo "No affected apps found in file. Skipping build/push."
          exit 0
        fi

        echo "Starting build and push process..."

        while read app; do
          if [ -z "$app" ]; then continue; fi

          # üîπ Normalizamos el nombre de la imagen para Docker y Cloud Run
          IMAGE_NAME=$(echo $app | tr '@' '-' | tr '/' '-')
          
          echo "üê≥ Building and pushing $app as $IMAGE_NAME..."
          docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME ./apps/$app
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME
        done < ./affected_apps.txt
    waitFor: ['Affected apps']

  # 5Ô∏è‚É£ Desplegar las apps afectadas en Cloud Run usando nombres normalizados
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy affected apps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ ! -s ./affected_apps.txt ]; then
          echo "No affected apps found in file. Skipping deployment."
          exit 0
        fi

        echo "Starting deployment process..."

        while read app; do
          if [ -z "$app" ]; then continue; fi

          IMAGE_NAME=$(echo $app | tr '@' '-' | tr '/' '-')

          echo "üöÄ Deploying $app as $IMAGE_NAME to Cloud Run..."
          gcloud run deploy $IMAGE_NAME \
            --image=gcr.io/$PROJECT_ID/$IMAGE_NAME \
            --platform=managed \
            --region=us-central1 \
            --quiet \
            --project=$PROJECT_ID
        done < ./affected_apps.txt
    waitFor: ['Build and push images']

# 6Ô∏è‚É£ Opciones generales de la build
options:
  logging: CLOUD_LOGGING_ONLY

# 7Ô∏è‚É£ Timeout opcional
timeout: "1800s"
