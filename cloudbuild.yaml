steps:
  # 1Ô∏è‚É£ Instalar Node y dependencias
  - name: 'node:22.17-bullseye'
    id: 'Install dependencies'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        # Usa 'npm ci' para instalaciones limpias en CI/CD
        npm ci

  # 2Ô∏è‚É£ Detectar apps afectadas (utiliza el archivo /workspace/affected_apps.txt)
  - name: 'node:22.17-bullseye'
    id: 'Affected apps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Detecting affected projects..."
        # Detectar apps afectadas usando Nx
        npx nx print-affected --target=build --base=origin/main~1 --head=HEAD --select=projects > /workspace/affected_apps.txt
        
        AFFECTED_APPS=$(cat /workspace/affected_apps.txt | tr '\n' ' ')
        if [ -z "$AFFECTED_APPS" ]; then
          echo "No apps affected. Exiting now."
          # Salir del script actual para no pasar una lista vac√≠a
          exit 0
        fi
        
        echo "Detected apps: $AFFECTED_APPS"
        # Aseguramos que el archivo est√© limpio y listo para el siguiente paso.
        echo $AFFECTED_APPS > /workspace/affected_apps.txt

  # 3Ô∏è‚É£ Construir y Pushear solo las im√°genes de Docker de las apps afectadas
  # Utilizamos el builder 'docker' para operaciones de im√°genes.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build and push images'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Leer la lista de aplicaciones del archivo compartido
        if [ ! -f /workspace/affected_apps.txt ]; then
          echo "No affected apps file found. Skipping build/push."
          exit 0
        fi
        
        # Leemos la lista (que ahora est√° en una sola l√≠nea)
        AFFECTED_APPS=$(cat /workspace/affected_apps.txt)
        echo "Apps to build: $AFFECTED_APPS"
        
        for app in $AFFECTED_APPS; do
          echo "üê≥ Building and pushing $app..."
          # Construye la imagen, asumiendo que el Dockerfile est√° en ./apps/$app
          docker build -t gcr.io/$PROJECT_ID/$app ./apps/$app
          # Sube la imagen a Google Container Registry
          docker push gcr.io/$PROJECT_ID/$app
        done
    waitFor: ['Affected apps']

  # 4Ô∏è‚É£ Desplegar las apps afectadas en Cloud Run
  # ESENCIAL: Usamos el builder 'gcloud' porque este s√≠ incluye el comando 'gcloud'.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy affected apps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Re-leer la lista de aplicaciones
        if [ ! -f /workspace/affected_apps.txt ]; then
          echo "No affected apps file found. Skipping deployment."
          exit 0
        fi

        AFFECTED_APPS=$(cat /workspace/affected_apps.txt)
        echo "Apps to deploy: $AFFECTED_APPS"

        for app in $AFFECTED_APPS; do
          echo "üöÄ Deploying $app to Cloud Run..."
          gcloud run deploy $app \
            --image=gcr.io/$PROJECT_ID/$app \
            --platform=managed \
            --region=us-central1 \
            --quiet \
            --project=$PROJECT_ID # Especificamos el proyecto para mayor seguridad
        done
    waitFor: ['Build and push images'] # Esperamos a que las im√°genes est√©n listas

# 5Ô∏è‚É£ Opciones generales de la build
options:
  logging: CLOUD_LOGGING_ONLY

# 6Ô∏è‚É£ Timeout opcional
timeout: "1800s"
